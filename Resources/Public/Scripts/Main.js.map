{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/maplibre-gl@2.4.0/node_modules/maplibre-gl/rollup/maplibregl.js", "../../../../Carbon.GeoMap/Resources/Private/Fusion/GeoMap.js", "../../Private/Fusion/Presentation/index.js", "../../Private/Fusion/Main.js"],
  "sourcesContent": ["//\n// Our custom intro provides a specialized \"define()\" function, called by the\n// AMD modules below, that sets up the worker blob URL and then executes the\n// main module, storing its exported value as 'maplibregl'\n\n// The three \"chunks\" imported here are produced by a first Rollup pass,\n// which outputs them as AMD modules.\n\n// Shared dependencies, i.e.:\n/*\ndefine(['exports'], function (exports) {\n    // Code for all common dependencies\n    // Each module's exports are attached attached to 'exports' (with\n    // names rewritten to avoid collisions, etc.)\n})\n*/\nimport './build/maplibregl/shared';\n\n// Worker and its unique dependencies, i.e.:\n/*\ndefine(['./shared.js'], function (__shared__js) {\n    //  Code for worker script and its unique dependencies.\n    //  Expects the output of 'shared' module to be passed in as an argument,\n    //  since all references to common deps look like, e.g.,\n    //  __shared__js.shapeText().\n});\n*/\n// When this wrapper function is passed to our custom define() above,\n// it gets stringified, together with the shared wrapper (using\n// Function.toString()), and the resulting string of code is made into a\n// Blob URL that gets used by the main module to create the web workers.\nimport './build/maplibregl/worker';\n\n// Main module and its unique dependencies\n/*\ndefine(['./shared.js'], function (__shared__js) {\n    //  Code for main GL JS module and its unique dependencies.\n    //  Expects the output of 'shared' module to be passed in as an argument,\n    //  since all references to common deps look like, e.g.,\n    //  __shared__js.shapeText().\n    //\n    //  Returns the actual maplibregl (i.e. src/index.js)\n});\n*/\nimport './build/maplibregl/index';\n\nexport default maplibregl;\n", "const DOCUMENT = document;\n\n/*jshint -W030 */\nconst globalSettings = JSON.parse(DOCUMENT.currentScript.dataset?.settings || null);\n/*jshint +W030 */\n\nconst iconSettings = {\n    markup: `<svg version=\"1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 149 178\"><path fill=\"${globalSettings.pinColor}\" stroke=\"#FFF\" stroke-width=\"6\" stroke-miterlimit=\"10\" d=\"M126 23l-6-6A69 69 0 0 0 74 1a69 69 0 0 0-51 22A70 70 0 0 0 1 74c0 21 7 38 22 52l43 47c6 6 11 6 16 0l48-51c12-13 18-29 18-48 0-20-8-37-22-51z\"/><circle fill=\"${globalSettings.pinColor}\" cx=\"74\" cy=\"75\" r=\"61\"/><circle fill=\"#FFF\" cx=\"74\" cy=\"75\" r=\"30\"/></svg>`,\n    anchor: [12, 32],\n    size: [25, 30],\n    popupAnchor: [0, -28],\n};\n\nfunction getMapCanvas(element) {\n    return element.querySelector(\".carbon-geomap__canvas\");\n}\n\nfunction getAddresses(canvas) {\n    return [...canvas.querySelectorAll(\".carbon-geomap-coordinate\")]\n        .map((element) => {\n            const coordinate = JSON.parse(element.dataset?.coordinate || null);\n            if (!coordinate) {\n                return null;\n            }\n            return {\n                html: element.outerHTML,\n                lat: coordinate.lat,\n                lng: coordinate.lng,\n            };\n        })\n        .filter((element) => element !== null);\n}\n\nfunction getEditor(element, key) {\n    return element.querySelector(`.carbon-geomap-coordinatestable__${key} .neos-inline-editable`)?.firstElementChild;\n}\n\nfunction getLatLngEditors(element) {\n    const lat = getEditor(element, \"lat\");\n    const lng = getEditor(element, \"lng\");\n\n    return lat && lng ? { lat, lng } : null;\n}\n\nfunction updateEditor(editor, value) {\n    editor.innerText = value.toString();\n}\n\nfunction updateLatLngEditors(editors, values) {\n    updateEditor(editors.lat, values.lat);\n    updateEditor(editors.lng, values.lng);\n}\n\nfunction initFrontend({ className, initFunction }) {\n    [...DOCUMENT.querySelectorAll(`.carbon-geomap.${className}`)].forEach((element) =>\n        initFunction({ element, live: true })\n    );\n}\n\nfunction initBackend({ className, initFunction, nodeType }) {\n    if (typeof className !== \"string\" || typeof initFunction !== \"function\" || typeof nodeType !== \"string\") {\n        console.error(\n            \"Invalid backend edit initialization: You need to set className, initFunction and nodeType correctly\",\n            { className, initFunction, nodeType }\n        );\n        return;\n    }\n\n    const liveClassName = `.carbon-geomap--live.${className}`;\n    const editClassName = `.carbon-geomap--edit.${className}`;\n    const liveNodes = [...DOCUMENT.querySelectorAll(liveClassName)];\n    const editContainerNodes = liveNodes.map((element) => element.nextElementSibling);\n\n    // Init the live maps\n    liveNodes.forEach((element) => initFunction({ element, live: true }));\n\n    // Observer if something inside the edit view changes\n    const observer = new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const element = mutation.addedNodes[0];\n            if (element && element.matches(editClassName)) {\n                initFunction({ element, live: false });\n                break;\n            }\n        }\n    });\n\n    // Re-initialize the edit map if something inside the edit view changes\n    editContainerNodes.forEach((element) => observer.observe(element, { childList: true }));\n\n    // If the user clicks to edit, init the edit map and remove the live map\n    DOCUMENT.addEventListener(\"carbonCBD\", (event) => {\n        const { type, mode, element } = event.detail;\n\n        if (!type === nodeType || mode === \"live\") {\n            return;\n        }\n\n        // Wait for the DOM to be ready\n        setTimeout(() => {\n            // Initialize the edit map\n            [...element.querySelectorAll(editClassName)].forEach((element) => initFunction({ element, live: false }));\n        }, 10);\n    });\n}\n\nexport {\n    globalSettings,\n    iconSettings,\n    getMapCanvas,\n    getAddresses,\n    getLatLngEditors,\n    updateLatLngEditors,\n    initBackend,\n    initFrontend,\n};\n", "import {\n    globalSettings,\n    getMapCanvas,\n    getAddresses,\n    getLatLngEditors,\n    updateLatLngEditors,\n    initFrontend,\n    initBackend,\n} from \"Packages/Carbon/Carbon.GeoMap/Resources/Private/Fusion/GeoMap.js\";\n\nimport { Map, NavigationControl, Marker, Popup, LngLatBounds, setRTLTextPlugin } from \"maplibre-gl\";\n\n// Style of map\nconst HTML = document.documentElement;\nconst styleSetting = globalSettings.style;\nconst darkModePreference = window.matchMedia(\"(prefers-color-scheme: dark)\");\nconst hasDarkAndLightMode = !!(typeof styleSetting === \"object\" && styleSetting.light && styleSetting.dark);\nconst changeStyleBasedOnClass = styleSetting.basedOn === \"class\";\n\n// Variable for the map\nlet map = null;\n// Variable for the style\nlet style = hasDarkAndLightMode ? getDynamicStyleUrl() : getStyleUrl(styleSetting);\n\nfunction getStyleUrl(key) {\n    return `https://tiles.stadiamaps.com/styles/${key || \"outdoors\"}.json`;\n}\n\nfunction getDynamicStyleUrl() {\n    let key = styleSetting.light;\n    if (\n        (!changeStyleBasedOnClass && darkModePreference.matches) ||\n        (changeStyleBasedOnClass && HTML.classList.contains(\"dark\"))\n    ) {\n        key = styleSetting.dark;\n    }\n    return getStyleUrl(key);\n}\n\nfunction updateStyle() {\n    if (!map || typeof map.setStyle != \"function\") {\n        return;\n    }\n    let newStyle = getDynamicStyleUrl();\n    if (newStyle !== style) {\n        style = newStyle;\n        map.setStyle(style);\n    }\n}\n\nif (hasDarkAndLightMode) {\n    if (changeStyleBasedOnClass) {\n        const observer = new MutationObserver((mutationList) => {\n            mutationList.forEach(function (mutation) {\n                if (mutation.type === \"attributes\" && mutation.attributeName === \"class\") {\n                    updateStyle();\n                }\n            });\n        });\n        observer.observe(HTML, {\n            attributes: true,\n        });\n    } else {\n        darkModePreference.addEventListener(\"change\", updateStyle);\n    }\n}\n\nfunction initFunction({ element, live }) {\n    const settings = { ...globalSettings.mapOptions, ...JSON.parse(element.dataset?.map || null) };\n    const canvas = getMapCanvas(element);\n    const markerCollection = [];\n    const addresses = getAddresses(canvas);\n    const numberOfAddresses = addresses.length;\n    const inEditMode = !live && numberOfAddresses === 1;\n    const zoom = settings.defaultZoom || live ? 14 : 16;\n\n    if (!settings.center) {\n        settings.center = { lng: 0, lat: 0 };\n    }\n\n    if (globalSettings.setRTLTextPlugin) {\n        setRTLTextPlugin(\n            \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js\",\n            null,\n            true // Lazy load the plugin\n        );\n    }\n\n    const mapSettings = {\n        ...settings,\n        container: canvas,\n        style,\n        zoom,\n        center: [settings.center.lng, settings.center.lat],\n    };\n\n    map = new Map(mapSettings);\n\n    map.addControl(new NavigationControl());\n\n    addresses.forEach((address) => {\n        // Construct a marker and set it's coordinates\n\n        const marker = new Marker({ color: globalSettings.pinColor, draggable: !live });\n        marker.setLngLat([address.lng, address.lat]);\n\n        const popup = new Popup({ closeButton: false, maxWidth: null });\n        popup.setHTML(address.html);\n\n        // Set the marker's popup.\n        marker.setPopup(popup);\n\n        // Finally, we add the marker to the map.\n        marker.addTo(map);\n\n        markerCollection.push(marker);\n\n        if (inEditMode) {\n            // Wait for the Neos UI\n            setTimeout(() => {\n                const EDITORS = getLatLngEditors(element);\n                if (EDITORS) {\n                    marker.on(\"drag\", () => {\n                        const lngLat = marker.getLngLat();\n                        updateLatLngEditors(EDITORS, lngLat);\n                    });\n                }\n            }, 10);\n        }\n    });\n\n    if (numberOfAddresses > 1) {\n        const firstBound = markerCollection[0].getLngLat();\n        const secondBound = markerCollection[1].getLngLat();\n        const bounds = new LngLatBounds(firstBound, secondBound);\n\n        const numberOfTheRest = numberOfAddresses - 2;\n\n        for (let i = 0; i < numberOfTheRest; i++) {\n            bounds.extend(markerCollection[i + 2].getLngLat());\n        }\n\n        map.fitBounds(bounds, { padding: 80, linear: true, maxZoom: zoom });\n    }\n\n    if (!numberOfAddresses) {\n        console.warn(\"No addresses found\");\n        map.setCenter(settings.center);\n        map.zoomTo(2);\n    }\n\n    document.dispatchEvent(\n        new CustomEvent(\"initializedJonnittoStadiaMaps\", {\n            detail: {\n                map,\n                element,\n                markers: markerCollection,\n            },\n        })\n    );\n\n    setTimeout(() => {\n        element.style.visibility = \"visible\";\n    }, 50);\n}\n\nexport { initFunction, initFrontend, initBackend };\n", "import { initFunction, initFrontend } from \"./Presentation\";\n\ninitFrontend({ className: \"jonnitto-stadiamaps\", initFunction });\n"],
  "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",
  "names": ["maplibregl$1", "maplibregl", "DOCUMENT", "globalSettings", "iconSettings", "getMapCanvas", "element", "getAddresses", "canvas", "coordinate", "getEditor", "key", "getLatLngEditors", "lat", "lng", "updateEditor", "editor", "value", "updateLatLngEditors", "editors", "values", "initFrontend", "className", "initFunction", "import_maplibre_gl", "HTML", "styleSetting", "globalSettings", "darkModePreference", "hasDarkAndLightMode", "changeStyleBasedOnClass", "map", "style", "getDynamicStyleUrl", "getStyleUrl", "key", "updateStyle", "newStyle", "mutationList", "mutation", "initFunction", "element", "live", "settings", "canvas", "getMapCanvas", "markerCollection", "addresses", "getAddresses", "numberOfAddresses", "inEditMode", "zoom", "mapSettings", "address", "marker", "popup", "EDITORS", "getLatLngEditors", "lngLat", "updateLatLngEditors", "firstBound", "secondBound", "bounds", "numberOfTheRest", "i", "initFrontend", "initFunction"]
}
